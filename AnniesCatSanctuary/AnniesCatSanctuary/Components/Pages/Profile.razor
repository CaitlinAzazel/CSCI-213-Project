@page "/profile"
@rendermode InteractiveServer
@using AnniesCatSanctuary.Services
@using AnniesCatSanctuary.Data
@inject UserProfileService UserProfileService
@inject UserProfileStorageService UserProfileStorageService
@inject NavigationManager NavigationManager

<h3>Edit Profile</h3>
<EditForm Model="userProfile" OnValidSubmit="HandleValidSubmit" FormName="userProfileForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="userProfile.FirstName" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="userProfile.LastName" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="userProfile.Email" />
    </div>
    <div class="form-group">
        <label for="phone">Phone Number</label>
        <InputText id="phone" class="form-control" @bind-Value="userProfile.Phone" />
    </div>
    <button type="submit" class="btn btn-primary">Save Profile</button>
</EditForm>

@code {
    private UserProfile userProfile = new UserProfile();
    private bool isClient = false; // Track if we are on the client

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the profile from localStorage after the component has rendered
            var profile = await UserProfileStorageService.GetProfileFromLocalStorage("userProfile");
            userProfile = profile ?? new UserProfile
                {
                    FirstName = "Guest",
                    LastName = "User",
                    Email = "guest@example.com"
                };
            isClient = true; // Set to true after loading the profile
            StateHasChanged();  // Trigger a re-render to update the UI with profile data
        }
    }

    private async Task HandleValidSubmit()
    {
        if (isClient) // Ensure we are on the client before calling JS interop
        {
            // Save the profile to localStorage
            await UserProfileStorageService.SaveProfileToLocalStorage("userProfile", userProfile);
            // Optionally provide feedback to the user
            // For example, you could show a success message here
        }
    }
}